/**
  ******************************************************************************
  * @file    Function.h 
  * @author  SMS ZLZ
  * @version V1.0.0
  * @date    19-11-2013
  * @brief   函数声明
  ******************************************************************************
  */
#include "vari.h"

//中断优先级定义
#define INT_PRIORITY_0          0x00//优先级0 最高
#define INT_PRIORITY_1          0x20//优先级1 
#define INT_PRIORITY_2          0x40//优先级2 
#define INT_PRIORITY_3          0x60//优先级3 
#define INT_PRIORITY_4          0x80//优先级4
#define INT_PRIORITY_5          0xa0//优先级5
#define INT_PRIORITY_6          0xc0//优先级6
#define INT_PRIORITY_7          0xe0//优先级7 最低

/*****************************************************************************
* 初始化系统频率子程序
*****************************************************************************/
void Init_Pll(void);
/*****************************************************************************
* 初始化GPIO口 
*****************************************************************************/
void Init_Gpio(void);
/*****************************************************************************
* 初始化系统节拍定时器 
*****************************************************************************/
void Init_SysTick(void);
/*****************************************************************************
* 初始化SSI
*****************************************************************************/
void Init_Ssi(void);
/*****************************************************************************
* 串口初始化
* 人口 Com:端口号
*****************************************************************************/
void Init_Com(u8 Com);
/*****************************************************************************
* 串口初始化
* 管脚已在Init_Gpio()中设置
*****************************************************************************/
void Init_Uart(void);
/*****************************************************************************
* 初始化定时器
* Timer0 Timer1 Timer2 被分成六个计数器
* Timer0-A Timer0-B Timer1-A Timer1-B Timer2-A Timer2-B 
*****************************************************************************/
void Init_Timer(void);
/*****************************************************************************
* 初始化CAN0接口
*****************************************************************************/
void Init_CAN0(void);
/*****************************************************************************
* 初始化CAN1接口
*****************************************************************************/
void Init_CAN1(void);
/*****************************************************************************
* 初始化看门狗 
*****************************************************************************/
void Init_Wdt(void);
/*****************************************************************************
* 初始化ADC
*****************************************************************************/
void Init_Adc(void);
/*****************************************************************************
* 初始化中断 
* 中断优先级 0最高 255最低
* 标准晶振频率较高 中断有效级最高 防止丢脉冲
*****************************************************************************/
void Init_Int(void);


/*****************************************************************************
* CAN短数据发送指令缓冲区头指针加1处理
*****************************************************************************/
extern void SDATA_MSG_OHead_ADD_ONE(void);
/*****************************************************************************
* 从机CAN数据发送请求超时处理
*****************************************************************************/
void Proc_CAN_OvTm(void);  
/*****************************************************************************
* 从机CAN1数据发送请求超时处理
*****************************************************************************/
void Proc_CAN1_OvTm(void);
/*****************************************************************************
* 长数据接收处理
*****************************************************************************/
void CAN_LDATA_RX_Pr(CAN_MSG *CAN_RX_MSG);
/*****************************************************************************
* 长数据发送处理
*****************************************************************************/
void CAN_LDATA_TX_Pr(void);
/*****************************************************************************
* 处理主机查询信息
*****************************************************************************/
void Proc_Mst_Check(void);
void Proc_LDATA_MSG_IBUF(void);
/*****************************************************************************
* 处理CAN短数据接收指令缓冲区
*****************************************************************************/
void Proc_SDATA_IBUF(void);
/*****************************************************************************
* 处理CAN1短数据 接收指令缓冲区
*****************************************************************************/
void Proc_CNA1_SDATA_IBUF(void);
/*****************************************************************************
* 处理CAN短数据发送指令缓冲区
*****************************************************************************/
void Proc_SDATA_OBUF(void);
/*****************************************************************************
* 处理CAN1短数据发送指令缓冲区
*****************************************************************************/
void Proc_CAN1_SDATA_OBUF(void);
/*****************************************************************************
* 从机发送重发请求帧
*****************************************************************************/
void SLV_REQ_RETX(void);
/*****************************************************************************
* 从机发送数据请求帧
*****************************************************************************/
void SLV_REQ_TX(void);
/****************************************************************************
* CAN总线错误状态处理
****************************************************************************/
void Proc_CAN_ERR_STS(void);  
void Init_Ram(void);            // RAM和变量初始化
void Solid_Mtr_Tab(void);	    //固化表位号 即RAM->FLASH
/*****************************************************************************
* 处理CAN总线状态
* 处理超时
*****************************************************************************/
void Proc_CAN_STS(void); 
/*****************************************************************************
* 处理CAN1总线状态
* 处理超时
*****************************************************************************/
void Proc_CAN1_STS(void);
/****************************************************************************
* 字符串拷贝 将Str1 拷贝到Str2中
* Str1 待拷贝的字符串
* Str2 待写入的字符串
* Len Str2 最大长度
* 待拷贝字符串长度不够 前面填充空格 ' ' 为了显示后对齐
****************************************************************************/
void Fill_Space_StrCpy(u8 *Str1,u8 *Str2,u8 Len);
/*****************************************************************************
* 处理总控中心启动超时
*****************************************************************************/
void Proc_ZK2009_OVT(void);
//固化参数值 即RAM->FLASH
void Solid_Save_Tab(void);

/*****************************************************************************
* 设置CAN MSG 接收RAM区过滤设置
* 入口:CANx CAN结构体
* 长数据 命令 CMD=3预留
*****************************************************************************/
void Set_MsgRam(u32 CANx);
/*****************************************************************************
* 设置CAN MSG 接收RAM区过滤设置
* 入口:CANx CAN结构体
* 长数据 命令 CMD=3预留
*****************************************************************************/
void Set_CAN1MsgRam(u32 CANx);
/*****************************************************************************
* 喂狗程序 
*****************************************************************************/
void WDTFeed(void);
/*****************************************************************************
* 设置 CAN0 接收报文RAM 区 报文对象
* 入口:CANx CAN结构体
* 入口: CAN_MSG 报文指针 
* 入口: eMsgType 报文类型
* 关闭接收到远程帧自动回送功能 ZLZ 2008.11.27
*****************************************************************************/
void CAN_RxMsg_Set(u32 CANx, CAN_MSG_SET *CAN_MSG, tMsgObjType eMsgType);
/*****************************************************************************
* 设置 CAN1 接收报文RAM 区 报文对象
* 入口:CANx CAN结构体
* 入口: CAN_MSG 报文指针 
* 入口: eMsgType 报文类型
* 关闭接收到远程帧自动回送功能 ZLZ 2008.11.27
*****************************************************************************/
void CAN1_RxMsg_Set(u32 CANx, CAN1_MSG_SET *CAN_MSG, tMsgObjType eMsgType);
/*****************************************************************************
* 设置 CAN0 报文RAM 区 报文对象
* 入口:CANx CAN结构体
* 入口: CAN_MSG 报文指针 
* 入口: eMsgType 报文类型 MSG_OBJ_TYPE_TX  MSG_OBJ_TYPE_TX_REMOTE
* 2008.12.5 为提高处理速度 去掉远程帧发送 如果需要发送远程帧 要修改程序
*****************************************************************************/
void CAN_Tx_Msg(u32 CANx, CAN_MSG *CAN_MSG, tMsgObjType eMsgType);
/*****************************************************************************
* 设置 CAN1 报文RAM 区 报文对象
* 入口:CANx CAN结构体
* 入口: CAN_MSG 报文指针 
* 入口: eMsgType 报文类型 MSG_OBJ_TYPE_TX  MSG_OBJ_TYPE_TX_REMOTE
* 2008.12.5 为提高处理速度 去掉远程帧发送 如果需要发送远程帧 要修改程序
*****************************************************************************/
void CAN1_Tx_Msg(u32 CANx, CAN1_MSG *CAN_MSG, tMsgObjType eMsgType);
/*****************************************************************************
* 读取 CAN 报文RAM 区 报文对象
* 入口:CANx CAN结构体
* 入口: CAN_MSG 报文指针
* 入口: bClrPendingInt 是否清除挂起位
* 2008.11.27 zlz 取消了屏蔽码读取 不接收远程帧 
*****************************************************************************/
void CAN_Rx_Msg(u32 CANx, CAN_MSG *CAN_MSG, u8 bClrPendingInt);
/*****************************************************************************
* 读取 CAN1 报文RAM 区 报文对象
* 入口:CANx CAN结构体
* 入口: CAN_MSG 报文指针
* 入口: bClrPendingInt 是否清除挂起位
* 2008.11.27 zlz 取消了屏蔽码读取 不接收远程帧 
*****************************************************************************/
void CAN1_Rx_Msg(u32 CANx, CAN1_MSG *CAN_MSG, u8 bClrPendingInt);
void CANDataRegWrite(uint8_t *pui8Data, uint32_t *pui32Register, uint32_t ui32Size);

void CANDataRegRead(uint8_t *pui8Data, uint32_t *pui32Register, uint32_t ui32Size);
/*****************************************************************************
* 调试使能 JTAG 口开放
*****************************************************************************/
void JTAG_EN_Pr(void);
/*****************************************************************************
* COM发送缓冲区处理
* 人口:COM 串口编号
* 串口发送和接收FIFO都为16字节
* 串口发送缓冲区FIFO设置为<=1/8 中断 即发送缓冲区字节数不大于2字节时 申请发送中断
*****************************************************************************/
void Proc_Com_OBuf(u8 COM);

/*****************************************************************************
* COM接收缓冲区处理
*****************************************************************************/
void Proc_Com_IBuf(u8 COM);
/*****************************************************************************
* COM接收超时处理
* 人口:COM 串口编号
*****************************************************************************/
void Proc_Com_Rx_OvTm(u8 COM);

